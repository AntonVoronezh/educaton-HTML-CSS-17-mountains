extends ../main.layout.pug

block variables
  - var title = 'Мой блог'

block scripts
  script(src='blog.bundle.js')

block content
    .container
      .main__top.blog
        .works__triangles-wrap
          .works__left 
            .works__triangles
              svg(fill="#ffffff", viewbox="0 0 900 150", class="triangle", preserveAspectRatio="none")
                  polygon(points="0,0 0,150 900,150")
          .works__right 
            .works__triangles
              svg(fill="#ffffff", viewbox="0 0 900 150", class="triangle", preserveAspectRatio="none")
                  polygon(points="0,150 900,150 900,0")
        .blog__wrap
          aside.blog__aside
            button.blog__aside-circle
            - 
              var titles = [
                'Абсолютное позиционирование в CSS: понять раз и навсегда',
                'Лучшие JavaScript-инструменты и тенденции за 2018 год',
                'Полное руководство по элементам HTML-формы',
                'Основы функционального программирования в JavaScript'
              ]
            ul.blog__list
              each title,i in titles
                
                if i === 0
                  li.blog__item.blog__item--active 
                    a(href=`blog.html#${i}`).blog__link.blog__link--active #{title}
                else
                  li.blog__item
                    a(href=`blog.html#${i}`).blog__link #{title}

          main.blog__main
            article.blog__article 
              header.blog__header#0
                h2.second-title.second-title--blog Абсолютное позиционирование в CSS: понять раз и навсегда
              time.blog__time(datetime="2019-01-29 19:00") 29 января 2019
              section.blog__section
                h3.visually-hidden position: absolute
                p.blog__paragraph Вы все еще не понимаете как работает абсолютное позиционирование в CSS и теряете элементы на экране? Давайте разбираться в этой магии.
                p.blog__paragraph Когда вы устанавливаете position: absolute, на первый план выходит не сам элемент, а его родительский контейнер, ведь относительно него и осуществляется позиционирование в CSS. Сложность в том, что это не всегда непосредственный родитель элемента.
            
            article.blog__article 
              header.blog__header#1
                h2.second-title.second-title--blog Лучшие JavaScript-инструменты и тенденции за 2018 год
              time.blog__time(datetime="2019-01-23 19:00") 23 января 2019
              section.blog__section
                h3.visually-hidden JavaScript-инструменты
                p.blog__paragraph JavaScript-инструменты,технологии и тенденции уходящего года: об этом и многом другом из последней версии авторитетного опроса!
                p.blog__paragraph Создатели опроса The State of JavaScript опросили 20 000 JavaScript-разработчиков с целью узнать, чем они пользуются, что им нравится, и чему хотелось бы научиться. В результате получилась целая коллекция статистических и аналитических данных, которая поможет вам органично вписаться в экосистему JavaScript.
                p.blog__paragraph Теперь библиотеки и другие JavaScript-инструменты не только объединяются в общие разделы (фронтенд, бэкенд и т. д.), но и каждой из них выделяется отдельная страница. Таким образом, можно убрать все лишнее и сконцентрироваться на изучении только нужных тем.
            
            article.blog__article 
              header.blog__header#2
                h2.second-title.second-title--blog Полное руководство по элементам HTML-формы
              time.blog__time(datetime="2019-01-19 19:00") 19 января 2019
              section.blog__section
                h3.visually-hidden  Создание HTML-формы
                p.blog__paragraph Создание HTML формы – неотъемлемая часть сайта и важный навык веб-разработчиков. Используйте это руководство для изучения элементов HTML-форм.
                p.blog__paragraph HTML-формы требуются для сбора данных от посетителей сайта. Например, при регистрации на Uber, Netflix или Facebook пользователь вводит свое имя, почту и пароль.
            
            article.blog__article 
              header.blog__header#3
                h2.second-title.second-title--blog Основы функционального программирования в JavaScript
              time.blog__time(datetime="2019-01-10 19:00") 10 января 2019
              section.blog__section
                h3.visually-hidden Объяснение азов 
                p.blog__paragraph Объяснение азов функционального программирования на простых примерах для создания лаконичного и легко поддерживаемого кода.
                p.blog__paragraph В последние годы отмечается еще большее разграничение между традиционным и функциональным программированием в JavaScript. Суть его не в превосходстве одного над другим, а в личных предпочтениях.
                p.blog__paragraph Конечно же, с функциональным программированием вам придется пересмотреть свое видение кода. Данная концепция активно используется разработчиками в проектах, для которых эффективность и надежность кода стоят на первом месте.
                p.blog__paragraph Конечно же, с функциональным программированием вам придется пересмотреть свое видение кода. Данная концепция активно используется разработчиками в проектах, для которых эффективность и надежность кода стоят на первом месте.
           
//- .overlay.overlay-plus 
//-   - var obj = {'Мои работы':'works.html','Обо мне':'about.html','Блог':'blog.html','Авторизация':'index.html'} 
//-     ul.overlay__list
//-       each value,key in obj
//-         li.overlay__item
//-           a(href=`${value}` title=`${key}`).overlay__link #{key}